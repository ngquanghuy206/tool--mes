import multiprocessing
import time
import json
import requests
import os
from zlapi import ZaloAPI, ThreadType, Message, Mention, MultiMsgStyle, MessageStyle

def custom_print(text):
    print(text)

def create_main_banner():
    banner = """
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£§‚£∂‚£ø‚£ø‚£∑‚£¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚£Ä‚£Ä‚†à‚†ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚£¥‚£ø‚£ø‚£ø‚£∑‚£Ñ‚†Ä‚†â‚†â‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚¢∏‚£ø‚°ã‚£æ‚£ø‚£Ø‚°ª‚†Ç‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚¢∏‚£ø‚£ß‚°ô‚¢ø‚£ø‚£ø‚£¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚¢∏‚£ø‚£ø‚£ø‚£¶‚°Ω‚£ø‚£ø‚£ø‚£¶‚£Ä‚£Ä‚†Ä‚†§‚†§‚†§‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£å‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£æ‚£∑‚£∂‚£¶‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚°å‚†ô‚£ø‚£ü‚£õ‚£õ‚£ª‚£ø‚£ø‚£ø‚†ø‚†è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†à‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ü‚†π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚£Ä‚£§‚£§‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†à‚¢ø‚£ø‚°ø‚†ø‚£ø‚£ø‚£ø‚£Ü‚†à‚†õ‚†ª‚†ø‚†ü‚†ã‚†Å‚°ø‚£ü‚£Ø‚£ù‚¢ø‚£ø‚£¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£∑‚£∂‚£ç‚£õ‚£∑‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£¥‚£ø‚£ø‚£ø‚°ø‚¢∏‚£ø‚£ø‚£ø‚£¶‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†õ‚†ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£¥‚£æ‚£ø‚£ø‚°ø‚†ü‚£Ø‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚£Ø‚£≠‚£ô‚°õ‚†ø‚£ø‚£ø‚†ü‚†â‚†Ä‚†Ä‚†â‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ø‚£ø‚£ø‚£ø‚£∑‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ñ‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∞‚£ø‚£ø‚£ø‚£ø‚†è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∞‚£ø‚£ø‚£ø‚£ø‚°ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£ø‚£ø‚£ø‚£ø‚°ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£æ‚£ø‚£ø‚£ø‚£ø‚°ø‚†õ‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∞‚£ø‚£ø‚£ø‚£ø‚°ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ø‚£Ñ‚£§‚£§‚£§‚£§‚£§‚£Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚£ø‚£ø‚£ø‚£ø‚°ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ø‚£ø‚£ø‚°ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†É
""".format(time.strftime('%I:%M %p, %d/%m/%Y'))
    return banner

def create_instructions():
    instructions = """üîπ H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG TOOL TREO NG√îN üîπ
1Ô∏è‚É£ Nh·∫≠p s·ªë l∆∞·ª£ng t√†i kho·∫£n Zalo mu·ªën ch·∫°y.
2Ô∏è‚É£ Nh·∫≠p IMEI, Cookie cho t·ª´ng t√†i kho·∫£n.
3Ô∏è‚É£ Nh·∫≠p t√™n file .txt ch·ª©a n·ªôi dung spam.
4Ô∏è‚É£ Nh·∫≠p delay gi·ªØa c√°c l·∫ßn g·ª≠i (gi√¢y).
5Ô∏è‚É£ Ch·ªçn c√≥ b·∫≠t th·ªùi gian t·ª± h·ªßy tin nh·∫Øn (TTL) hay kh√¥ng (Y/N).
   ‚Ä¢ N·∫øu ch·ªçn Y, nh·∫≠p th·ªùi gian TTL (gi√¢y).
6Ô∏è‚É£ Ch·ªçn nh√≥m (VD: 1,3).
‚úÖ Bot s·∫Ω t·ª± ƒë·ªông g·ª≠i tin nh·∫Øn m√†u ƒë·ªè m·∫∑c ƒë·ªãnh.
‚ö†Ô∏è L∆∞u √Ω: ƒê·∫£m b·∫£o file .txt v√† cookie h·ª£p l·ªá!
"""
    return instructions

def read_file_content(filename):
    try:
        with open(filename, "r", encoding="utf-8") as file:
            return file.read().strip()
    except Exception as e:
        custom_print(f"L·ªói ƒë·ªçc file {filename}: {e}")
        return ""

def parse_selection(input_str, max_index):
    try:
        numbers = [int(i.strip()) for i in input_str.split(',')]
        return [n for n in numbers if 1 <= n <= max_index]
    except:
        custom_print("ƒê·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá!")
        return []

class Bot(ZaloAPI):
    def __init__(self, api_key, secret_key, imei, session_cookies, mode="treongon", delay_min=0, message_text="", ttl=None):
        super().__init__(api_key, secret_key, imei, session_cookies)
        self.mode = mode
        self.delay_min = delay_min
        self.message_text = message_text
        self.ttl = ttl
        self.running_flags = {}
        self.processes = {}

    def start_spam(self, thread_id, thread_type, ttl=None):
        if not self.message_text:
            custom_print("N·ªôi dung ng√¥n r·ªóng!")
            return
        if thread_id not in self.running_flags:
            self.running_flags[thread_id] = multiprocessing.Value('b', False)
        if thread_id not in self.processes:
            self.processes[thread_id] = None
        if not self.running_flags[thread_id].value:
            self.running_flags[thread_id].value = True
            self.processes[thread_id] = multiprocessing.Process(
                target=self.spam_messages_treongon,
                args=(thread_id, thread_type, self.running_flags[thread_id], ttl)
            )
            self.processes[thread_id].start()

    def spam_messages_treongon(self, thread_id, thread_type, running_flag, ttl=None):
        while running_flag.value:
            try:
                self.setTyping(thread_id, thread_type)
                time.sleep(4)
                mention = Mention("-1", length=len(self.message_text), offset=0) if self.message_text else None
                style = MultiMsgStyle(
                    [
                        MessageStyle(
                            offset=0,
                            length=1000,
                            style="color",
                            color="#15a85f",
                            auto_format=False,
                        ),
                        MessageStyle(
                            offset=0,
                            length=1000,
                            style="font",
                            size="40",
                            auto_format=False
                        ),
                    ]
                )
                if ttl is not None:
                    self.send(Message(text=self.message_text, mention=mention, style=style), thread_id=thread_id, thread_type=thread_type, ttl=ttl)
                else:
                    self.send(Message(text=self.message_text, mention=mention, style=style), thread_id=thread_id, thread_type=thread_type)
                custom_print(f"ƒê√£ g·ª≠i tin nh·∫Øn t·ªõi nh√≥m {thread_id}")
            except Exception as e:
                custom_print(f"L·ªói g·ª≠i tin nh·∫Øn: {e}")
            time.sleep(self.delay_min)

    def onMessage(self, *args, **kwargs):
        pass

    def onEvent(self, *args, **kwargs):
        pass

    def onAdminMessage(self, *args, **kwargs):
        pass

    def fetch_groups(self):
        try:
            all_groups = self.fetchAllGroups()
            group_list = []
            for group_id, _ in all_groups.gridVerMap.items():
                group_info = self.fetchGroupInfo(group_id)
                group_name = group_info.gridInfoMap[group_id]["name"]
                group_list.append({
                    'id': group_id,
                    'name': group_name
                })
            return type('GroupObj', (), {'groups': [type('GroupItem', (), {'grid': g['id'], 'name': g['name']})() for g in group_list]})()
        except Exception as e:
            custom_print(f"L·ªói khi l·∫•y danh s√°ch nh√≥m: {e}")
            return None

def start_bot_treongon(api_key, secret_key, imei, session_cookies, message_text, delay, group_ids, ttl=None):
    bot = Bot(api_key, secret_key, imei, session_cookies, mode="treongon", delay_min=delay, message_text=message_text, ttl=ttl)
    for group_id in group_ids:
        custom_print(f"B·∫Øt ƒë·∫ßu treo ng√¥n nh√≥m {group_id}")
        bot.start_spam(group_id, ThreadType.GROUP, ttl=ttl)
    bot.listen(run_forever=True, thread=False, delay=1, type='requests')

def start_multiple_accounts():
    while True:
        print(create_main_banner())
        print(create_instructions())
        try:
            num_accounts = int(input("üí† Nh·∫≠p s·ªë l∆∞·ª£ng t√†i kho·∫£n Zalo mu·ªën ch·∫°y: "))
        except ValueError:
            custom_print("Nh·∫≠p sai, ph·∫£i l√† s·ªë nguy√™n!")
            return
        processes = []
        for i in range(num_accounts):
            print(f"\nNh·∫≠p th√¥ng tin cho t√†i kho·∫£n {i+1}")
            try:
                imei = input("üì± Nh·∫≠p IMEI c·ªßa Zalo: ")
                cookie_str = input("üç™ Nh·∫≠p Cookie: ")
                try:
                    session_cookies = eval(cookie_str)
                    if not isinstance(session_cookies, dict):
                        custom_print("Cookie ph·∫£i l√† dictionary!")
                        continue
                except:
                    custom_print("Cookie kh√¥ng h·ª£p l·ªá, d√πng d·∫°ng {'key': 'value'}!")
                    continue
                bot = Bot('api_key', 'secret_key', imei, session_cookies, mode="treongon")
                groups = bot.fetch_groups()
                if not groups or not hasattr(groups, 'groups') or not groups.groups:
                    custom_print("Kh√¥ng l·∫•y ƒë∆∞·ª£c nh√≥m n√†o!")
                    continue
                print("\nDanh s√°ch nh√≥m:")
                for idx, group in enumerate(groups.groups, 1):
                    print(f"{idx}. {group.name} (ID: {group.grid})")
                raw = input("üî∏ Nh·∫≠p s·ªë nh√≥m mu·ªën ch·∫°y (VD: 1,3): ")
                selected = parse_selection(raw, len(groups.groups))
                if not selected:
                    custom_print("Kh√¥ng ch·ªçn nh√≥m n√†o!")
                    continue
                selected_ids = [groups.groups[i - 1].grid for i in selected]
                file_txt = input("üìÇ Nh·∫≠p t√™n file .txt ch·ª©a n·ªôi dung spam: ")
                message_text = read_file_content(file_txt)
                while True:
                    try:
                        delay = float(input("‚è≥ Nh·∫≠p delay gi·ªØa c√°c l·∫ßn g·ª≠i (gi√¢y): "))
                        if delay < 0:
                            custom_print("Delay ph·∫£i kh√¥ng √¢m!")
                            continue
                        break
                    except ValueError:
                        custom_print("Delay ph·∫£i l√† s·ªë!")
                ttl = None
                while True:
                    ttl_choice = input("‚è∞ B·∫≠t th·ªùi gian t·ª± h·ªßy tin nh·∫Øn (TTL)? (Y/N): ").lower()
                    if ttl_choice in ['y', 'n']:
                        break
                    custom_print("Vui l√≤ng nh·∫≠p Y ho·∫∑c N!")
                if ttl_choice == 'y':
                    while True:
                        try:
                            ttl_seconds = float(input("‚è∞ Nh·∫≠p th·ªùi gian t·ª± h·ªßy (gi√¢y): "))
                            if ttl_seconds <= 0:
                                custom_print("Th·ªùi gian TTL ph·∫£i l·ªõn h∆°n 0!")
                                continue
                            ttl = int(ttl_seconds * 1000)
                            break
                        except ValueError:
                            custom_print("Th·ªùi gian TTL ph·∫£i l√† s·ªë!")
                p = multiprocessing.Process(
                    target=start_bot_treongon,
                    args=('api_key', 'secret_key', imei, session_cookies, message_text, delay, selected_ids, ttl)
                )
                processes.append(p)
                p.start()
            except Exception as e:
                custom_print(f"L·ªói nh·∫≠p li·ªáu: {e}")
                continue
        custom_print("\nT·∫§T C·∫¢ BOT ƒê√É KH·ªûI ƒê·ªòNG TH√ÄNH C√îNG")
        while True:
            restart = input("üîÑ B·∫°n mu·ªën d√πng l·∫°i tool? (Y/N): ").lower()
            if restart in ['y', 'n']:
                break
            custom_print("Vui l√≤ng nh·∫≠p Y ho·∫∑c N!")
        if restart == 'y':
            continue
        else:
            custom_print("\nüëã Ch√†o t·∫°m bi·ªát! C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng tool!")
            break

if __name__ == "__main__":
    start_multiple_accounts()